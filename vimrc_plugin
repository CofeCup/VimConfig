
let $VIMFILES = "$VIMRUNTIME/vimfiles"

" ====================== Vundle config ============================
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$VIMFILES/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('$VIMFILES/bundle/')

" independent
Plugin 'VundleVim/Vundle.vim'
Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdtree'
Plugin 'ryanoasis/vim-devicons'
Plugin 'morhetz/gruvbox'
" Plugin 'vhda/verilog_systemverilog.vim'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'Lokaltog/vim-powerline'
Plugin 'kien/ctrlp.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'jiangmiao/auto-pairs'
" Plugin 'kien/rainbow_parentheses.vim'
Plugin 'python-mode/python-mode'
Plugin 'lervag/vimtex'
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
"Plugin 'KeitaNakamura/tex-conceal.vim'

" dependent

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
"
" ====================== Supertab config ==========================

let g:SuperTabDefaultCompletionType='context'

" ====================== NERDTree config ==========================

autocmd VimEnter * NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeWinPos="left"
map<leader>t :NERDTreeToggle<CR>
let NERDTreeAutoCenter=1
let NERDTreeShowHidden=1
let NERDTreeWinSize=30
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let g:NERDTreeDirArrowExpandable='+'
let g:NERDTreeDirArrowCollapsible='-'
let NERDTreeMinimalUI=1

" ====================== Gurvbox config ==========================

set background=dark
colorscheme gruvbox

" " ====================== Rainbow Parentheses config ==========================
" 
" let g:rbpt_colorpairs = [
"     \ ['brown',       'RoyalBlue3'],
"     \ ['Darkblue',    'SeaGreen3'],
"     \ ['darkgray',    'DarkOrchid3'],
"     \ ['darkgreen',   'firebrick3'],
"     \ ['darkcyan',    'RoyalBlue3'],
"     \ ['darkred',     'SeaGreen3'],
"     \ ['darkmagenta', 'DarkOrchid3'],
"     \ ['brown',       'firebrick3'],
"     \ ['gray',        'RoyalBlue3'],
"     \ ['black',       'SeaGreen3'],
"     \ ['darkmagenta', 'DarkOrchid3'],
"     \ ['Darkblue',    'firebrick3'],
"     \ ['darkgreen',   'RoyalBlue3'],
"     \ ['darkcyan',    'SeaGreen3'],
"     \ ['darkred',     'DarkOrchid3'],
"     \ ['red',         'firebrick3'],
"     \ ]
" 
" let g:rbpt_max = 16
" 
" let g:rbpt_loadcmd_toggle = 0
" 
" 
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
" 
" ((((((((((((((((((((((()))))))))))))))))))))))

" " ====================== Verilog Plugin config(deleted) ==========================
" 
" nnoremap <leader>u :VerilogGotoInstanceStart<CR>
" nnoremap <leader>i :VerilogFollowInstance<CR>
" nnoremap <leader>o :VerilogReturnInstance<CR>
" nnoremap <leader>I :VerilogFollowPort<CR>
"
" " ====================== Vimtex Plugin config ==========================
let g:tex_flavor='latex'

" let g:vimtex_view_method='zathura' "linux
let g:vimtex_view_method='general' "windows(default)
let g:vimtex_view_general_viewer='SumatraPDF'
let g:vimtex_view_general_options_latexmk = '-reuse-instance'
let g:vimtex_view_general_options
    \ = '-reuse-instance -forward-search @tex @line @pdf'
    \ . ' -inverse-search "' . exepath(v:progpath)
    \ . ' --servername ' . v:servername
    \ . ' --remote-send \"^<C-\^>^<C-n^>'
    \ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
    \ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
    \ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""'
" " Sumatra PDF
" let g:vimtex_view_general_viewer = 'SumatraPDF'
" let g:vimtex_view_general_options
"   \ = '-reuse-instance -forward-search @tex @line @pdf'
"   \ . ' -inverse-search "gvim --servername ' . v:servername
"   \ . ' --remote-send \"^<C-\^>^<C-n^>'
"   \ . ':drop \%f^<CR^>:\%l^<CR^>:normal\! zzzv^<CR^>'
"   \ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
"   \ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
"   \ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""'

let g:vimtex_quickfix_mode=0
set conceallevel=0 "hide nothing
let g:tex_conceal=''
" let g:tex_conceal='abdmg'
let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : './latexmk/',
    \ 'callback' : 1,
    \ 'continuous' : 1,
    \ 'executable' : 'latexmk',
    \ 'hooks' : [],
    \ 'options' : [
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}
let g:vimtex_compiler_latexmk_engines = {
    \ '_'                : '-xelatex',
    \ 'pdflatex'         : '-pdf',
    \ 'dvipdfex'         : '-pdfdvi',
    \ 'lualatex'         : '-lualatex',
    \ 'xelatex'          : '-xelatex',
    \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
    \ 'context (luatex)' : '-pdf -pdflatex=context',
    \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
    \}
let g:vimtex_compiler_latexrun_engines = {
    \ '_'                : 'xelatex',
    \ 'pdflatex'         : 'pdflatex',
    \ 'lualatex'         : 'lualatex',
    \ 'xelatex'          : 'xelatex',
    \}

" " ====================== UltiSnips Plugin config ==========================
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsListSnippets = '<c-tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetDirectories=["D:\Vim\vim82\vimfiles\mysnippets","UltiSnips"]



" The default value for g:UltiSnipsJumpBackwardTrigger interferes with the
" built-in complete function: |i_CTRL-X_CTRL-K|. A workaround is to add the
" following to your vimrc file or switching to a plugin like Supertab or
" YouCompleteMe.
inoremap <c-x><c-k> <c-x><c-k>

" ====================== tex-conceal Plugin config ==========================
" set conceallevel=1
" let g:tex_conceal='abdmg'
" hi Conceal ctermbg=none
