snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet dm "Fomula between line" wA
\[
$1
.\] $0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '(})(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet '(})_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet trpo "transpose" iA
^{T}
endsnippet

snippet -1 "inverse" i
^{-1}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

snippet tt "superscript" iA
^{T}
endsnippet

snippet tS "superscript" iA
^{2}
endsnippet

snippet tT "superscript" iA
^{3}
endsnippet

snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 1000
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)bar' "bar" riA
\overline{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" ri
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

snippet unLi "underline" iA
\underline{$1}$0
endsnippet

snippet tbf "textbf" i
\textbf{$1}\quad$0
endsnippet

snippet tbf "textbf" bA
\textbf{$1}\quad$0
endsnippet
	
snippet pg "paragraph" bA
\paragraph{$1}$0
endsnippet

snippet spg "subparagraph" bA
\subparagraph{$1}$0
endsnippet

snippet st "section" bA
\section{$1}$0
endsnippet

snippet sst "subsection" bA
\subsection{$1}$0
endsnippet

snippet ssst "subsubsection" bA
\subsubsection{$1}$0
endsnippet

snippet bm "bold" iA
\bm{$1}$0
endsnippet

snippet CA "cap" iA
\cap
endsnippet

snippet CU "cup" iA
\cup
endsnippet

snippet IN "in" iA
\in
endsnippet

snippet NTI "not in" iA
\notin
endsnippet

snippet NI "resetve in" iA
\ni
endsnippet
	
snippet ...  "cdots" iA
\cdots
endsnippet

snippet vd "vdots" iA
\vdots
endsnippet

snippet _ "_" i
_{$1}$0
endsnippet

snippet qd "quad" iA
\quad
endsnippet
	
snippet O+ "oplus" iA
\oplus
endsnippet

snippet \al "alpha" iA
\alpha
endsnippet

snippet \bal "bmalpha" iA
\bm{\alpha}
endsnippet

snippet "ser([a-zA-Z1-9])bal" "serial bold alpha from 1 to ?" riA
\bm{\alpha}_1, \bm{\alpha}_2, \cdots, \bm{\alpha}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mbal" "serial bold alpha from 1 to ?" riA
 $\bm{\alpha}_1, \bm{\alpha}_2, \cdots, \bm{\alpha}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet \mbal "mbmalpha" iA
 $\bm{\alpha}$1$$0 
endsnippet

snippet \be "beta" iA
\beta
endsnippet

snippet \bbe "bmbeta" iA
\bm{\beta}
endsnippet

snippet \mbbe "mbmbeta" iA
 $\bm{\beta}$1$$0 
endsnippet

snippet "ser([a-zA-Z1-9])bbe" "serial bold beta from 1 to ?" riA
\bm{\beta}_1, \bm{\beta}_2, \cdots, \bm{\beta}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mbbe" "serial bold beta from 1 to ?" riA
 $\bm{\beta}_1, \bm{\beta}_2, \cdots, \bm{\beta}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet \Vep "varepsilon" iA
\varepsilon
endsnippet

snippet \bVep "bmvarepsilon" iA
\bm{\varepsilon}
endsnippet

snippet "ser([a-zA-Z1-9])bVep" "serial bold varepsilon from 1 to ?" riA
\bm{\varepsilon}_1, \bm{\varepsilon}_2, \cdots, \bm{\varepsilon}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mbVep" "serial bold varepsilon from 1 to ?" riA
 $\bm{\varepsilon}_1, \bm{\varepsilon}_2, \cdots, \bm{\varepsilon}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet \Vph "varphi" iA
\varphi
endsnippet

snippet \it "eta" iA
\eta
endsnippet

snippet \bit "bmeta" iA
\bm{\eta}
endsnippet

snippet "ser([a-zA-Z])bit" "serial bold eta from 1 to ?" riA
\bm{\eta}_1, \bm{\eta}_2, \cdots, \bm{\eta}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z])mbit" "serial bold eta from 1 to ?" riA
 $\bm{\eta}_1, \bm{\eta}_2, \cdots, \bm{\eta}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet \mbIt "mbmeta" iA
 $\bm{\eta}$1$$0 
endsnippet

snippet \la "lambda" iA
\lambda
endsnippet

snippet \La "varLambda" iA
\varLambda
endsnippet

snippet \ga "gamma" iA
\gamma
endsnippet

snippet \bga "gamma" iA
\bm{\gamma}
endsnippet

snippet \bxi "\xi" iA
\bm{\xi}
endsnippet

snippet \the "\theta" iA
\theta
endsnippet

snippet \grad "\nabla" iA
\nabla
endsnippet

snippet \part "partial" iA
\partial
endsnippet

snippet <> "l/r angle" iA
\langle$1\rangle$0
endsnippet

snippet \vnorm "norm of vector" iA
\|$1\|^{2}$0
endsnippet

snippet \subs "" iA
\subseteq 
endsnippet

snippet \sups "" iA
\supseteq 
endsnippet

snippet mbA "bm{A}" iA
$\bm{A}$ 
endsnippet

snippet AA "\mathscr{A}" iA
\mathscr{A}
endsnippet

snippet mA "\mathscr{A}" iA
 $\mathscr{A}$ 
endsnippet

snippet mbB "bm{B}" iA
$\bm{B}$ 
endsnippet

snippet mbC "bm{C}" iA
$\bm{C}$ 
endsnippet

snippet CC "\mathscr{C}" iA
\mathbb{C}
endsnippet

snippet mbF "$F$" iA
$\bm{F}$ 
endsnippet

snippet FF "\mathscr{F}" iA
\mathscr{F}
endsnippet

snippet "ser([a-zA-Z1-9])be" "serial bold e from 1 to ?" riA
\bm{e}_1, \bm{e}_2, \cdots, \bm{e}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mbe" "serial bold e from 1 to ?" riA
$\bm{e}_1, \bm{e}_2, \cdots, \bm{e}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet mE "$E$" iA
$E$ 
endsnippet

snippet mbE "$E$" iA
$\bm{E}$ 
endsnippet

snippet mI "$I$" iA
$I$ 
endsnippet

snippet mbI "$I$" iA
$\bm{I}$ 
endsnippet

snippet mP "$P$" iA
$P$ 
endsnippet

snippet mbP "$P$" iA
$\bm{P}$ 
endsnippet

snippet mbv "$v$" iA
$\bm{v}$ 
endsnippet

snippet mV "$V$" iA
$V$ 
endsnippet

snippet mbV "$V$" iA
$\bm{V}$ 
endsnippet

snippet "ser([a-zA-Z1-9])V" "serial V from 1 to ?" riA
V_1, V_2, \cdots, V_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mV" "serial V from 1 to ?" riA
$V_1, V_2, \cdots, V_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet "ser([a-zA-Z1-9])bv" "serial bold v from 1 to ?" riA
\bm{v}_1, \bm{v}_2, \cdots, \bm{v}_{`!p snip.rv=match.group(1)`}
endsnippet

snippet "ser([a-zA-Z1-9])mbV" "serial bold V from 1 to ?" riA
$\bm{V}_1, \bm{V}_2, \cdots, \bm{V}_{`!p snip.rv=match.group(1)`}$ 
endsnippet

snippet mbw "$w$" iA
$\bm{w}$ 
endsnippet

snippet mO "$O$" iA
$O$ 
endsnippet

snippet mbO "$O$" iA
$\bm{O}$ 
endsnippet

snippet mS "$S$" iA
$S$ 
endsnippet

snippet mbS "$S$" iA
$\bm{S}$ 
endsnippet

snippet mT "$T$" iA
$T$ 
endsnippet

snippet mbT "$T$" iA
$\bm{T}$ 
endsnippet

snippet tang= "triangleq" iA
\triangleq
endsnippet
	
snippet \lsum "sumlimits" iA
\sum\limits^{$1}_{$2}$0
endsnippet

snippet \nlsum "sumnolimits" iA
\sum\nolimits^{$1}_{$2}$0
endsnippet

snippet \lint "intlimits" iA
\int\limits^{$1}_{$2}$0
endsnippet

snippet \nlint "intnolimits" iA
\int\nolimits^{$1}_{$2}$0
endsnippet

snippet RR "mathbb R" iA
\mathbb{R}
endsnippet

snippet ZZ "mathbb Z" iA
\mathbb{Z}
endsnippet
	
snippet cas "Cases" bA
\begin{cases}
	$1
\end{cases}
$0
endsnippet

snippet pm "pmatrix" bA
\begin{pmatrix}
	$1
\end{pmatrix}
endsnippet

snippet vm "vmatrix" bA
\begin{vmatrix}
	$1
\end{vmatrix}
$0
endsnippet

snippet , "append space behind comma" iA
,\ 
endsnippet

snippet ( "blanket complete" iA
($1) $0
endsnippet

snippet ( "blanket complete" bA
($1) $0
endsnippet

snippet \{ "big blanket" iA
\\\{$1\\\}$0
endsnippet

snippet : "description" iA
: 
endsnippet
	
snippet \in "sapce append" iA
\in 
endsnippet

snippet \geq "space append" iA
\geq 
endsnippet

snippet \neq "space append" iA
\neq 
endsnippet

snippet \cap "space append" iA
\cap 
endsnippet

snippet \cup "space append" iA
\cup 
endsnippet

snippet \to "space append" iA
\to 
endsnippet

snippet \mbox "mbox" iA
\ \mbox{$1}\ $0
endsnippet

	
	
	
